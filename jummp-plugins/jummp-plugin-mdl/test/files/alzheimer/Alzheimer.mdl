# nt2mdl 1.040 beta Nick Holford n.holford@auckland.ac.nz
Alzheimer_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   HEADER{
      C=list(type=continuous)
      DID=list(type=continuous)
      ID=list(type=categorical)
      DROP4=list(type=continuous)
      DRGF=list(type=continuous)
      DRUG=list(type=continuous)
      DOSE=list(type=continuous)
      TIME=list(type=continuous,units="h")
      BLND=list(type=continuous)
      DROP10=list(type=continuous)
      DV=list(type=continuous)
      NTOT=list(type=continuous)
      NTRT=list(type=continuous)
      AGE=list(type=continuous,units="y")
      DROP15=list(type=continuous)
      MMSE=list(type=continuous)
      BL=list(type=continuous)
      PY=list(type=continuous)
      PYF=list(type=continuous)
      DROP20=list(type=continuous)
      STAT=list(type=continuous)
      DROP22=list(type=continuous)
      MDV=list(type=categorical)
   }# end HEADER

   FILE{
      data=list(
           source="alzheimer_stub.csv",
           ignore="C",
           inputformat="NONMEM")
   }# end FILE
} # end data object

Alzheimer_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_BASELINE=list(value=0 ,fix=true)
      POP_RATE=list(value=6) # of change of ADAS-cog due to disease progression
      POP_ST_DV=list(value=10)
      POP_BETA=list(value=-16.5) # forplacebo
      POP_KEL=list(value=0.1,lo=0.001,hi=2) # for placebo
      POP_KEQ=list(value=0.1,lo=0.01,hi=2) # for placebo
      POP_DONEPEZIL_EFFEXT=list(value=-2)
      POP_DONEPEZIL_ET50=list(value=2,lo=0,hi=50)
      POP_DONEPEZIL_DOSE_DIFFERENCE=list(value=1,lo=0)
      POP_GALANTAMINE_EFFECT=list(value=-4)
      POP_GALANTAMINE_ET50=list(value=2,lo=0,hi=50)
      POP_GALANTAMINE_DOSE_DIFFERENCE=list(value=0 ,fix=true)
      POP_RIVASTIGMINE_EFFECT=list(value=-1)
      POP_RIVASTIGMINE_ET50=list(value=2,lo=0,hi=50)
      POP_RIVASTIGMINE_DOSE_DIFFERENCE=list(value=1,lo=0)
      POP_BAD1=list(value=0.01) # power
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_STATUS=list(value=1 ,type="VAR")
      PPV_ALPHA=list(value=1 ,type="VAR")
      PPV_BETA=list(value=1 ,type="VAR")
      #SIGMA
      RUV_ADD=list(value= 1 ,type="VAR",fix=true)

   }# end VARIABILITY

} # end of parameter object

### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.
Alzheimer_mdl = mdlobj{

   INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      C=list(type=continuous,use=covariate)
      DID=list(type=continuous,use=covariate)
      ID=list(use=id,level=2)
      DRGF=list(type=continuous,use=covariate)
      DRUG=list(type=continuous,use=covariate)
      DOSE=list(type=continuous,use=covariate)
      TIME=list(use=idv,units="h")
      BLND=list(type=continuous,use=covariate)
      DV=list(type=continuous,use=dv,level=1)
      NTOT=list(type=continuous,use=covariate)
      NTRT=list(type=continuous,use=covariate)
      AGE=list(type=continuous,use=covariate,units="y")
      MMSE=list(type=continuous,use=covariate)
      BL=list(type=continuous,use=covariate)
      PY=list(type=continuous,use=covariate)
      PYF=list(type=continuous,use=covariate)
      STAT=list(type=continuous,use=covariate)
      MDV=list(use=mdv)
   }# end INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_BASELINE
      POP_RATE
      POP_ST_DV
      POP_BETA
      POP_KEL
      POP_KEQ
      POP_DONEPEZIL_EFFEXT
      POP_DONEPEZIL_ET50
      POP_DONEPEZIL_DOSE_DIFFERENCE
      POP_GALANTAMINE_EFFECT
      POP_GALANTAMINE_ET50
      POP_GALANTAMINE_DOSE_DIFFERENCE
      POP_RIVASTIGMINE_EFFECT
      POP_RIVASTIGMINE_ET50
      POP_RIVASTIGMINE_DOSE_DIFFERENCE
      POP_BAD1
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_STATUS
      PPV_ALPHA
      PPV_BETA
      #SIGMA
      RUV_ADD
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   #******MODEL COMPONENTS***********
   #baseline ADAS-cog effect
   if (BL==9999) {
    BADS = 25
   } else {
    BADS = BL
   }
   BAD1 = (BADS/25)^ POP_BAD1 
   #BAD2 = (BADS/25)^ THETA(17) 
   BSL=POP_BASELINE              #baseline ADAS-cog
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_STATUS ~ (type=Normal, mean=0, variance=PPV_STATUS,level=ID)
      eta_PPV_ALPHA ~ (type=Normal, mean=0, variance=PPV_ALPHA,level=ID)
      eta_PPV_BETA ~ (type=Normal, mean=0, variance=PPV_BETA,level=ID)
      eps_RUV_ADD ~ (type=Normal, mean=0, variance=RUV_ADD,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

   A=POP_RATE/52 + eta_PPV_ALPHA    #rate of change of ADAS-cog due to disease progression 
   #disease progression
   DIS=BSL + A*TIME*BAD1
   SLP=A*BAD1
   W=POP_ST_DV/sqrt(NTRT)
   #Plaebo effect
   BTP=POP_BETA   #beta for placebo
   KELP=POP_KEL  #Kel for placebo
   KEQP=POP_KEQ  #Keq for placebo: onset half-life of the placebo effect=ln(2)/Keq
   PBO =BTP*(exp(-KELP*TIME)-exp(-KEQP*TIME))
   #drug effect
   #---donepezil--- 
    EFF1 = POP_DONEPEZIL_EFFEXT*(DOSE/5)^ POP_DONEPEZIL_DOSE_DIFFERENCE
    ETD5 =POP_DONEPEZIL_ET50*exp(eta_PPV_BETA)
    DRG1 = EFF1*TIME/(ETD5 + TIME)                           
   #---galantamine--- 
    EFF2 = POP_GALANTAMINE_EFFECT  #*(DOSE/16)^ THETA(12)
    ETG5 =POP_GALANTAMINE_ET50*exp(eta_PPV_BETA)
    DRG2 = EFF2*TIME/(ETG5 + TIME)                                  
   #---rivastigmine--- 
    EFF3 = POP_RIVASTIGMINE_EFFECT*(DOSE/6)^ POP_RIVASTIGMINE_DOSE_DIFFERENCE
    ETR5 =POP_RIVASTIGMINE_ET50*exp(eta_PPV_BETA)
    DRG3 = EFF3*TIME/(ETR5 + TIME) 
   # EFF3 = THETA(13)*(DOSE/6)^ THETA(14)
   # DRG3 = EFF3*TIME                                  #linear
   if (DRUG==0) F = DIS + PBO  + eta_PPV_STATUS       #placebo
   if (DRUG==1) F = DIS + PBO + DRG1 + eta_PPV_STATUS  #donepezil
   if (DRUG==2) F = DIS + PBO + DRG2 + eta_PPV_STATUS  #galantamine
   if (DRUG==3) F = DIS + PBO + DRG3 + eta_PPV_STATUS  #rivastigmine

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.

   #Y=F+W*ERR(1) 
   IPRE=F
   IRES=DV-IPRE
   IWRES=IRES/W
TARGET_CODE(target=NMTRAN_CODE,location="$PRED",last=true){***
IF (ICALL.EQ.3) THEN
 OPEN(50,FILE='cwtab1.est')
WRITE (50,*)'ETAS'
DO WHILE (DATA)
IF (NEWIND.LE.1) WRITE (50,*) ETA
ENDDO
WRITE (50,*) 'THETAS'
WRITE (50,*) THETA
WRITE (50,*) 'OMEGAS'
WRITE (50,*) OMEGA(BLOCK)
WRITE (50,*) 'SIGMAS'
WRITE (50,*) SIGMA(BLOCK)
ENDIF
"LAST
"  COM(1)=G(1,1)
"  COM(2)=G(2,1)
"  COM(3)=G(3,1)
"  COM(4)=H(1,1)
***} # end TARGET_CODE
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y = F+W*eps_RUV_ADD
   }# end OBSERVATION


   OUTPUT_VARIABLES{
# The OUTPUT block specifies the model variables that may be exported from the model object.
      ID
      #COM1=G11
      #COM2=G21
      #COM3=G31
      #COM4=H11
      IPRE
      MDV
      TIME
      IWRES
   }# end OUTPUT_VARIABLES

} # end of model object

Alzheimer_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROBLEM RUN1.MOD
;final model (Run8)
;ADAS-cog study level analysis
***} # end TARGET_CODE

TARGET_CODE(target=NMTRAN_CODE,location="$ABBREVIATED",before="$PK"){***
$ABB COMRES=4
***} # end TARGET_CODE

# End TARGET specific code

   DATA{
      IGNORE=if(DID==17 || DID==19)
      DROP=list(
         DROP4,
         DROP10,
         DROP15,
         DROP20,
         DROP22
      ) # end DROP
   }# end DATA

   ## TABLE
   #NOPRINT ONEHEADER FILE=cwtab1.deriv NOPRINT ONEHEADER FILE = SDTAB1 

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo Alzheimer"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$ESTIMATION MAXEVAL=9999 PRINT=10 METHOD=1 NOABORT ;POSTHOC
$COV PRINT=E
***} # end TARGET_CODE
            algo=list("FOCE ")
            max=9999
            cov="y"
      }# end ESTIMATE
   }# end of myEST

}# end of task object

Alzheimer_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NONMEM

Alzheimer_fit=Alzheimer_task$myEST(t="NONMEM", m=Alzheimer_mdl, p=Alzheimer_par, d=Alzheimer_dat)

# Update parameter estimates with final estimates
Alzheimer_par=update(Alzheimer_fit,Alzheimer_par)

} # end of task execution language code
