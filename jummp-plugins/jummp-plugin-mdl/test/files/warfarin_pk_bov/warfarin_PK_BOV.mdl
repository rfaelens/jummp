# nt2mdl 1.040 beta Nick Holford n.holford@auckland.ac.nz
warfarin_PK_BOV_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   HEADER{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="h")
      WT=list(type=continuous,units="kg")
      AGE=list(type=continuous,units="y")
      SEX=list(type=categorical,define=list(female=0,male=1,MISSING=-99),recode=list("F","M","UNK"))
      AMT=list(type=continuous,units="mg")
      DVID=list(type=categorical)
      DV=list(type=continuous)
      MDV=list(type=categorical)
   }# end HEADER

   FILE{
      data=list(
           source="warfarin_conc_pca.csv",
           ignore="#",
           inputformat="NONMEM")
   }# end FILE
} # end data object

warfarin_PK_BOV_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_CL=list(value=0.1,lo=0.001) # L/h/70kg
      POP_V=list(value=8,lo=0.001) # L/70kg
      POP_KA=list(value=2,lo=0.001) # h-1
      POP_TLAG=list(value=1,lo=0.001) # h
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      diag(name="struc1",type="VAR") {
         BSV_CL=0.1,
         BSV_V=0.1
      } # end diag struc1
      matrix(name="struc2",type="VAR",fix=true) {
         BOV_CL1=0.1, # First BOV block
         0.01, BOV_V1=0.1
      } # end matrix struc2
      same(name="struc2") {
         BOV_CL2,
         BOV_V2
      } # end same struc2
      diag(name="struc4",type="VAR") {
         BOV_KA1=0.1,
         BOV_TLAG1=0.1
      } # end diag struc4
      same(name="struc4") {
         BOV_KA2,
         BOV_TLAG2
      } # end same struc4
      BSV_KA=list(value=0.1 ,type="VAR",fix=true)
      BSV_TLAG=list(value=0.1 ,type="VAR")
      #SIGMA
      diag(name="struc6",type="VAR") {
         RUV_PROP=0.01,
         RUV_ADD=0.05 # mg/L
      } # end diag struc6

   }# end VARIABILITY

} # end of parameter object

### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.
warfarin_PK_BOV_mdl = mdlobj{

   INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id,level=2)
      TIME=list(use=idv,units="h")
      WT=list(type=continuous,use=covariate,units="kg")
      AGE=list(type=continuous,use=covariate,units="y")
      SEX=list(type=categorical(female,male),use=covariate)
      AMT=list(use=amt,units="mg")
      DVID=list(type=categorical,use=dvid)
      DV=list(type=continuous,use=dv,level=1)
      MDV=list(use=mdv)
   }# end INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_CL
      POP_V
      POP_KA
      POP_TLAG
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      BSV_CL
      BSV_V
      BOV_CL1
      BOV_V1
      BOV_CL2
      BOV_V2
      BOV_KA1
      BOV_TLAG1
      BOV_KA2
      BOV_TLAG2
      BSV_KA
      BSV_TLAG
      #SIGMA
      RUV_PROP
      RUV_ADD
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
      # Covariate model
      GRPCL=POP_CL*(WT/70)^ 0.75
      GRPV=POP_V*WT/70
      GRPKA=POP_KA
      GRPLG=POP_TLAG
      OCC=SEX # create an occasion variable to show BOV code
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_BSV_CL ~ (type=Normal, mean=0, variance=BSV_CL,level=ID)
      eta_BSV_V ~ (type=Normal, mean=0, variance=BSV_V,level=ID)
      eta_BOV_CL1 ~ (type=Normal, mean=0, variance=BOV_CL1,level=ID)
      eta_BOV_V1 ~ (type=Normal, mean=0, variance=BOV_V1,level=ID)
      eta_BOV_CL2 ~ (type=Normal, mean=0, variance=BOV_CL2,level=ID)
      eta_BOV_V2 ~ (type=Normal, mean=0, variance=BOV_V2,level=ID)
      eta_BOV_KA1 ~ (type=Normal, mean=0, variance=BOV_KA1,level=ID)
      eta_BOV_TLAG1 ~ (type=Normal, mean=0, variance=BOV_TLAG1,level=ID)
      eta_BOV_KA2 ~ (type=Normal, mean=0, variance=BOV_KA2,level=ID)
      eta_BOV_TLAG2 ~ (type=Normal, mean=0, variance=BOV_TLAG2,level=ID)
      eta_BSV_KA ~ (type=Normal, mean=0, variance=BSV_KA,level=ID)
      eta_BSV_TLAG ~ (type=Normal, mean=0, variance=BSV_TLAG,level=ID)
      eps_RUV_PROP ~ (type=Normal, mean=0, variance=RUV_PROP,level=DV)
      eps_RUV_ADD ~ (type=Normal, mean=0, variance=RUV_ADD,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

      if (OCC==1) {
         BOVCL=eta_BOV_CL1
         BOVV=eta_BOV_V1
         BOVKA=eta_BOV_KA1
         BOVTLAG=eta_BOV_TLAG1
      } else {
         BOVCL=eta_BOV_CL2
         BOVV=eta_BOV_V2
         BOVKA=eta_BOV_KA2
         BOVTLAG=eta_BOV_TLAG2
      }
      # Individual parameters
      CL=GRPCL*exp(eta_BSV_CL+BOVCL)
      V=GRPV*exp(eta_BSV_V+BOVV)
      KA=GRPKA*exp(eta_BSV_KA+BOVKA)
      ALAG1=GRPLG*exp(eta_BSV_TLAG+BOVTLAG)
      # NM-TRAN scale for central compartment
      S2=V

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


   LIBRARY{
      ##  ADVAN2 TRANS2
      amount=nmadvan(model=2,trans=2,param=list(V,CL,KA,S2,ALAG1,F,A))
   }# end LIBRARY
   
      CONC=amount.A[2]/V
   #   Y=CONC*(1+ERR(1))+ERR(2)
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y = CONC+CONC*eps_RUV_PROP+eps_RUV_ADD
   }# end OBSERVATION


   OUTPUT_VARIABLES{
# The OUTPUT block specifies the model variables that may be exported from the model object.
      ID
      TIME
      WT
      SEX
      AGE
      CL
      V
      KA
      ALAG1
      DVID
      Y
   }# end OUTPUT_VARIABLES

} # end of model object

warfarin_PK_BOV_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

IMPORT{nmadvan = list(target = NMTRAN_CODE, name="ADVAN", param=list(model=2,trans=2, ncmt=2))}
TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROB WARFARIN PK
;O'Reilly RA, Aggeler PM, Leong LS. Studies of the coumarin anticoagulant
;drugs: The pharmacodynamics of warfarin in man.
;Journal of Clinical Investigation 1963;42(10):1542-1551
;O'Reilly RA, Aggeler PM. Studies on coumarin anticoagulant drugs
;Initiation of warfarin therapy without a loading dose.
;Circulation 1968;38:169-177
***} # end TARGET_CODE

# End TARGET specific code

   DATA{
      IGNORE=if(DVID==2)
   }# end DATA

   ## TABLE
   #NOPRINT ONEHEADER FILE=warf.fit 

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo warfarin_PK_BOV"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$EST METHOD=COND INTER
MAX=9990 SIG=3 NOABORT ;PRINT=1
$COV
***} # end TARGET_CODE
            algo=list("FOCE  INTER")
            max=9990
            sig=3
            cov="y"
      }# end ESTIMATE
   }# end of myEST

}# end of task object

warfarin_PK_BOV_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NONMEM

warfarin_PK_BOV_fit=warfarin_PK_BOV_task$myEST(t="NONMEM", m=warfarin_PK_BOV_mdl, p=warfarin_PK_BOV_par, d=warfarin_PK_BOV_dat)

# Update parameter estimates with final estimates
warfarin_PK_BOV_par=update(warfarin_PK_BOV_fit,warfarin_PK_BOV_par)

} # end of task execution language code
