/**
* Copyright (C) 2010-2013 EMBL-European Bioinformatics Institute (EMBL-EBI),
* Deutsches Krebsforschungszentrum (DKFZ)
*
* This file is part of Jummp.
*
* Jummp is free software; you can redistribute it and/or modify it under the
* terms of the GNU Affero General Public License as published by the Free
* Software Foundation; either version 3 of the License, or (at your option) any
* later version.
*
* Jummp is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
* A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License along
* with Jummp; if not, see <http://www.gnu.org/licenses/agpl-3.0.html>.
**/





package net.biomodels.jummp.plugins.security

/**
 * This class has been aut-generated by the Spring Security Core plugin.
 * See http://burtbeckwith.github.com/grails-spring-security-core/
 */
class User implements Serializable {
    private static final long serialVersionUID = 1L

    String username
    String password
    Person person
    String email
    Boolean enabled
    Boolean accountExpired
    Boolean accountLocked
    Boolean passwordExpired

    // custom additions
    /**
     * The code with which a new user can validate the registration
     */
    String registrationCode
    /**
     * The date when the registration code becomes invalid.
     */
    Date registrationInvalidation
    /**
     * The code with which a user can reset a password
     */
    String passwordForgottenCode
    /**
     * The date when the password forgotten code becomes invalid.
     */
    Date passwordForgottenInvalidation

    static constraints = {
        username(blank: false, unique: true)
        password(blank: false)
        email(email: true, unique: true)
        registrationCode(nullable: true)
        registrationInvalidation(nullable: true)
        passwordForgottenCode(nullable: true)
        passwordForgottenInvalidation(nullable: true)
        person(nullable: false, unique: true)
    }

    static mapping = {
        table '`user`'
        password(column: '`password`')
    }

    Set<Role> getAuthorities() {
        UserRole.findAllByUser(this).collect { it.role } as Set
    }

    /**
     *
     * @return User without any security relevant information.
     */
    User sanitizedUser() {
        return new User(id: this.id, username: this.username, email: this.email, 
        				person: new Person(userRealName: this.person.userRealName, 
        								   institution: this.person.institution,
        								   orcid:this.person.orcid))
    }
}
