== Actors ==

Here we describe the roles a user assumes in documented use cases (see below for their in-depth description).

=== Visitor ===

Anyone who accesses the system without being logged in is a **visitor**.

Possible actions:
* [[dev/UseCases#!list-models|accesses a specific model without prior knowledge of its identifier]]
* [[dev/UseCases#!search-models|retrieves specific models from the repository]]
* [[dev/UseCases#!show-model|gains more knowledge about a given model]]
* [[dev/UseCases#!download-model|downloads a given model in a specific format]]
* [[dev/UseCases#!simulate-model|runs simulations on a model using specific basic parameters]]

=== Submitter ===

Anyone who submits a model is considered a **submitter** of this particular model. Login required.

* uploads a model to the repository
* invites collaborators
* hands his model over to curation process
* checks the state of the curation (under curation, published)

=== Collaborator ===

Anyone who is given access to an unpublished/non-public/private model is a **collatorator**. Login required.

* uploads a new version of a model submitted by someone else
* curates/annotates a model of someone else

=== Contributor ===

Anyone who contributed to a model is a **contributor**: the submitter, any collaborator who updated the model via create-revision access. Should be added to the model SBML file automatically.

=== Reviewer ===

Anyone who needs to review a paper describing a (not yet published) model is a **reviewer**. Login required.

* has read access to a model for a given period of time set
* sees the status of previously reviewd models

=== Curator ===

Anyone who is carrying out the curation/annotation process on models of other people and publishes the resulting models is a **curator**. Login required.

* curates and annotates models coming from submitters and/or collaborators
* attaches documents and comments to these models
* published these models

=== Administrator ===

Anyone who maintains the installed BioModels instance is an **administrator**. Login required.

* manages releases of models
* has access to usage statistics



== Use cases ==

Each use case is described by these attributes: name (all lowercase verb-noun combination), summary, actors, pre(condition), input, output, post(condition), ui (user interface/interaction)

Here is a template for copy'n'edit. Note that the table CSS converts the table header (= name of use case) into all uppercase.

|=name   |=**verb-noun**|
|summary | |
|actors  | |
|pre     | |
|input   | |
|output  | |
|post    | |
|ui      | |

Some explanations:
* Actors should only list the typical users of this use case (in singular form) to highlight for whom this use case was written. For instance, we do not mention visitor if the use case requires login; we do not mention administrator even though he has access to all data and functionality if the use case was written mainly for different actors.
* Input and output are really just that: logical data that needs to be passed back and forth. This implies that data not connected to a user input is also listed. When it makes sense we indicate where data come from, e.g. text input fields, previous selections, etc.
* User interface/interaction tries to make the use case more concrete by giving an idea how a user would select or enter data, or which navigation choices are offered (without going into details).

Please break down the use cases such that all conditions and the resulting steps become clear. For instance, if model is invalid, error page is displayed, postcondition is unchanged, etc.


=== welcome-user ===

|=name   |=**welcome-user**
|summary | shows summary information depending on user
|actors  | all
|pre     | n/a
|input   | n/a
|output  | lists number of accessible models, number of public models\\ only for logged-in user: **submit-model** button\\ quick search box\\ quick access to most important features
|post    | n/a
|ui      | click on buttons to **search-models**, **login-user**, **submit-model**


=== list-models ===

|=name   |=**list-models**
|summary | lists all the models a user have access
|actors  | all
|pre     | n/a
|input   | n/a
|output  | provides a list of models
|post    | n/a
|ui      | each model has a hyperlink which allow access to the "show-model" action


=== login-user ===

|=name   |=**login-user**
|summary | user logs in to be authorised, i.e. granted access to models and web pages
|actors  | visitor
|pre     | user is not logged in
|input   | text input of account, password\\ button log in
|output  | redirect to desired/intercepted page\\ (in case the user followed a link which requires login)
|post    | session stores user and authorisations
|ui      | type in account, password\\ click on button to continue\\ password recovery option


=== search-models ===

|=name   |=**search-models**
|summary | search and list all models the current user has access to
|actors  | all
|pre     | user must be logged in to have access to non-public models
|input   | visitor can only retrieve public model\\ submitter/collaborator/reviewer/curator can retrieve\\ public, owned, accessible models
|output  | table of models (can be empty)\\ text input of search criteria
|post    | n/a
|ui      | click on table header to sort table\\ sort by latest update (default), name, model id, first author\\ click on model name, model id to **show-model**\\ click on text input to change search criteria\\ click on button to **search-models**


=== show-model ===

|=name   |=**show-model**
|summary | show model in tabbed view to visualise its content
|actors  | all
|pre     | n/a
|input   | model id
|output  | tabbed view (overview etc., inspired by biomodels software of 2010)
|post    | n/a
|ui      | click on tab to show it


=== download-model ===

|=name   |=**download-model**
|summary | allows the download of a given model
|actors  | all
|pre     | n/a
|input   | model id, format 
|output  | downloadable file of the requested model in the requested format
|post    | n/a
|ui      | browser window asking whether to open or save the file


=== simulate-model ===
|=name   |=**simulate-model**
|summary | simulate a given model
|actors  | all
|pre     | n/a
|input   | model id, basic parameters
|output  | reaction graph (picture), raw data
|post    | n/a
|ui      | selection of the species to simulate and basic parameters

=== submit-model ===

|=name   |=**submit-model**
|summary | user uploads a model from local filesystem to repository
|actors  | visitor, submitter, curator
|pre     | n/a
|input   | user\\ model file (SBML or other supported formats)\\ only for published model:\\ - one of pubmed id, doi, url OR journal, title, authors, affiliation, abstract\\ also for work-in-progress model:\\ - model name (can be automatically retrieved from the file,\\ if the submitted model is encoded in SBML)\\ - comment\\ submit button\\ current date (automatically set: will be the submission and last update date)
|output  | summary of the submission (success or failure)
|post    | DB and RCS store new model DOMs and file
|ui      | click on text fields to enter:\\ - publication info: pmid, doi or url (optional, c.f. work-in-progress models)\\ - use service like Citexplore to retrieve all publication details (provide a\\ form in case of failure)\\ - model details\\ give feedback to user if a check fails, e.g. model is not valid


=== update-model ===

|=name   |=**update-model**
|summary | replaces a model with a newer version
|actors  | owner, collaborator, curator
|pre     | model must be already submitted to the system (c.f. **submit-model**)
|input   | model file\\ comment\\ update button\\ current date (automatically set: will be date of last update)
|output  | summary of the submission (success or failure)\\ notification to curator and submitter (if action has been performed\\ by the submitter)
|post    | same as **submit-model**
|ui      | click on text field to enter comments\\ click on button to update


=== delete-model ===

|=name   |=**delete-model**
|summary | deletes a model
|actors  | submitter, curator, administrator\\ - submitter can only delete private/uncurated models\\ - curator can only delete models under curation\\ - administrator can do both
|pre     | model must be already submitted to the system (c.f. **submit-model**)\\ user must either own the model, or be the administrator
|input   | user\\ model\\ text input of comment
|output  | notification to curator
|post    | DB and RCS still contain the model for a limited time, but it is not visible\\ to the user; only the administrator can see it (and possibly undo the deletion)
|ui      | |


=== curate-model ===

|=name   |=**curate-model**
|summary | curates a model
|actors  | submitter, curator
|pre     | model must be already submitted to the system (c.f. **submit-model**)
|input   | model identifier
|output  | model is (partially) curated
|post    | model consistency test (provided by libSBML or similar)
|ui      | convert model to newest format\\ add simulation results (comments, screenshots, simulator files)


=== register-user ===

|=name   |=**register-user**
|summary | creates an user account
|actors  | visitor
|pre     | email address not yet in DB
|input   | full name\\ institution\\ email address
|output  | user and administrator receive email notification
|post    | details in DB
|ui      | |


=== publish-model ===

|=name   |=**publish-model**
|summary | make a model publicly available
|actors  | curator
|pre     | mode is under curation
|input   | |
|output  | |
|post    | model is public\\ can occur in search results of visitor
|ui      | |


=== release-models ===

|=name   |=**release-models**
|summary | release public model as a downloadable archive
|actors  | curator, administrator
|pre     | models are flagged as public
|input   | |
|output  | tar-ball of models
|post    | |
|ui      | |
