/**
* Copyright (C) 2010-2014 EMBL-European Bioinformatics Institute (EMBL-EBI),
* Deutsches Krebsforschungszentrum (DKFZ)
*
* This file is part of Jummp.
*
* Jummp is free software; you can redistribute it and/or modify it under the
* terms of the GNU Affero General Public License as published by the Free
* Software Foundation; either version 3 of the License, or (at your option) any
* later version.
*
* Jummp is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
* A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License along
* with Jummp; if not, see <http://www.gnu.org/licenses/agpl-3.0.html>.
*
* Additional permission under GNU Affero GPL version 3 section 7
*
* If you modify Jummp, or any covered work, by linking or combining it with
* Lucene, Spring Framework, Grails (or a modified version of that library), containing parts
* covered by the terms of Apache License v2.0, the licensors of this
* Program grant you additional permission to convey the resulting work.
* {Corresponding Source for a non-source form of such a combination shall
* include the source code for the parts of Lucene, Spring Framework, Grails used as well as
* that of the covered work.}
**/

package net.biomodels.jummp.search

import net.biomodels.jummp.core.events.JummpEvent
import net.biomodels.jummp.core.events.ModelCreatedEvent
import net.biomodels.jummp.core.events.RevisionCreatedEvent
import org.springframework.context.ApplicationEvent
import org.springframework.context.ApplicationListener

/**
 * @short Listener responsible for indexing new models and revisions.
 *
 * This class is meant to be executed as a (singleton) spring bean
 * which listens for events generated by the model service (new models/new revisions).
 *
 * @author Raza Ali, raza.ali@ebi.ac.uk
 * @author Mihai Glon»õ <mihai.glont@ebi.ac.uk>
 * @date   20160209
 */
class UpdatedRepositoryListener implements ApplicationListener {
    /**
     * Dependency injection of ModelDelegateService.
     */
    def modelDelegateService
    /**
     * Dependency injection of SearchService.
     */
    def searchService

    /**
     * Responds to model creation/update events
     *
     * Responds to the @p event, if it is a model create/update, the new content is added to
     * the search index.
     * @param event The event to be handled
     **/
    public void onApplicationEvent(ApplicationEvent event) {
        if (!JummpEvent.class.isAssignableFrom(event.getClass())) {
            return
        }
        if (event instanceof RevisionCreatedEvent) {
            searchService.updateIndex((event as RevisionCreatedEvent).revision)
            return
        }
        if (event instanceof ModelCreatedEvent) {
            ModelCreatedEvent modEvent = event as ModelCreatedEvent
            final String MODEL_ID = modEvent.model.publicationId ?: modEvent.model.submissionId
            searchService.updateIndex(modelDelegateService.getLatestRevision(MODEL_ID, false))
        }
    }
}
