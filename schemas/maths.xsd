<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://www.pharmml.org/2013/03/Maths" version="0.2"
    xmlns:math="http://www.pharmml.org/2013/03/Maths" elementFormDefault="qualified"
    attributeFormDefault="unqualified" xmlns:ct="http://www.pharmml.org/2013/03/CommonTypes">

    <xs:import namespace="http://www.pharmml.org/2013/03/CommonTypes"
        schemaLocation="http://www.pharmml.org/2013/03/CommonTypes"/>

    <xs:complexType name="BinopType">
        <xs:sequence>
            <xs:choice maxOccurs="1" minOccurs="1">
                <xs:element ref="ct:Scalar"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="ct:SymbRef"/>
                <xs:element ref="math:Constant"/>
                <xs:element ref="math:Binop"/>
                <xs:element ref="math:Uniop"/>
                <xs:element ref="math:FunctionCall"/>
            </xs:choice>
            <xs:choice maxOccurs="1" minOccurs="1">
                <xs:element ref="ct:Scalar"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="ct:SymbRef"/>
                <xs:element ref="math:Constant"/>
                <xs:element ref="math:Binop"/>
                <xs:element ref="math:Uniop"/>
                <xs:element ref="math:FunctionCall"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="op" use="required">
            <xs:annotation>
                <xs:documentation>The binary operator type.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:Name">
                    <xs:enumeration value="plus"/>
                    <xs:enumeration value="minus"/>
                    <xs:enumeration value="times"/>
                    <xs:enumeration value="divide"/>
                    <xs:enumeration value="power"/>
                    <xs:enumeration value="logx"/>
                    <xs:enumeration value="root"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="UniopType">
        <xs:complexContent>
            <xs:extension base="math:ExprType">
                <xs:attribute name="op" use="required">
                    <xs:annotation>
                        <xs:documentation>The unary operator type.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:Name">
                            <xs:enumeration value="exp"/>
                            <xs:enumeration value="log"/>
                            <xs:enumeration value="minus"/>
                            <xs:enumeration value="factorial"/>
                            <xs:enumeration value="sin"/>
                            <xs:enumeration value="cos"/>
                            <xs:enumeration value="tan"/>
                            <xs:enumeration value="sec"/>
                            <xs:enumeration value="csc"/>
                            <xs:enumeration value="cot"/>
                            <xs:enumeration value="sinh"/>
                            <xs:enumeration value="cosh"/>
                            <xs:enumeration value="tanh"/>
                            <xs:enumeration value="sech"/>
                            <xs:enumeration value="csch"/>
                            <xs:enumeration value="coth"/>
                            <xs:enumeration value="arcsin"/>
                            <xs:enumeration value="arccos"/>
                            <xs:enumeration value="arctan"/>
                            <xs:enumeration value="arcsec"/>
                            <xs:enumeration value="arccsc"/>
                            <xs:enumeration value="arccot"/>
                            <xs:enumeration value="arcsinh"/>
                            <xs:enumeration value="arccosh"/>
                            <xs:enumeration value="arctanh"/>
                            <xs:enumeration value="arcsech"/>
                            <xs:enumeration value="arccsch"/>
                            <xs:enumeration value="arccoth"/>
                            <xs:enumeration value="floor"/>
                            <xs:enumeration value="abs"/>
                            <xs:enumeration value="ceiling"/>
                            <xs:enumeration value="logistic"/>
                            <xs:enumeration value="logit"/>
                            <xs:enumeration value="probit"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ConstantType">
        <xs:attribute name="op" use="required">
            <xs:annotation>
                <xs:documentation>The type of constant.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:Name">
                    <xs:enumeration value="notanumber"/>
                    <xs:enumeration value="pi"/>
                    <xs:enumeration value="exponentiale"/>
                    <xs:enumeration value="infinity"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="PiecewiseType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="Piece" type="math:PieceType">
                <xs:annotation>
                    <xs:documentation>Defines a piece in the piecewise function.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="PieceType">
        <xs:complexContent>
            <xs:extension base="math:ExprType">
                <xs:sequence>
                    <xs:element ref="math:Condition"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ExprType">
        <xs:choice maxOccurs="1" minOccurs="1">
            <xs:element ref="ct:Scalar"/>
            <xs:element maxOccurs="1" minOccurs="1" ref="ct:SymbRef"/>
            <xs:element ref="math:Constant"/>
            <xs:element ref="math:Binop"/>
            <xs:element ref="math:Uniop"/>
            <xs:element ref="math:FunctionCall"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="LogicConditionType">
        <xs:choice maxOccurs="1">
            <xs:element ref="math:LogicBinop"/>
            <xs:element ref="math:LogicUniop"/>
            <xs:element ref="ct:Boolean"/>
            <xs:element ref="math:Otherwise"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="LogicBinOpType">
        <xs:sequence>
            <xs:choice>
                <xs:element ref="math:LogicBinop"/>
                <xs:element ref="math:LogicUniop"/>
                <xs:element ref="ct:Scalar"/>
                <xs:element ref="math:Constant"/>
                <xs:element ref="ct:SymbRef"/>
                <xs:element ref="math:Binop"/>
                <xs:element ref="math:Uniop"/>
                <xs:element ref="math:FunctionCall"/>
            </xs:choice>
            <xs:choice>
                <xs:element ref="math:LogicBinop"/>
                <xs:element ref="math:LogicUniop"/>
                <xs:element ref="ct:Scalar"/>
                <xs:element ref="math:Constant"/>
                <xs:element ref="ct:SymbRef"/>
                <xs:element ref="math:Binop"/>
                <xs:element ref="math:Uniop"/>
                <xs:element ref="math:FunctionCall"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="op" use="required">
            <xs:annotation>
                <xs:documentation>The logical binary operator type.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:Name">
                    <xs:enumeration value="lt"/>
                    <xs:enumeration value="leq"/>
                    <xs:enumeration value="gt"/>
                    <xs:enumeration value="geq"/>
                    <xs:enumeration value="eq"/>
                    <xs:enumeration value="neq"/>
                    <xs:enumeration value="and"/>
                    <xs:enumeration value="or"/>
                    <xs:enumeration value="xor"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="LogicExprType">
        <xs:choice maxOccurs="1">
            <xs:element ref="math:LogicBinop"/>
            <xs:element ref="math:LogicUniop"/>
            <xs:element ref="ct:Scalar"/>
            <xs:element ref="math:Constant"/>
            <xs:element ref="ct:SymbRef"/>
            <xs:element ref="math:Binop"/>
            <xs:element ref="math:Uniop"/>
            <xs:element ref="math:FunctionCall"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="LogicUniOpType">
        <xs:complexContent>
            <xs:extension base="math:LogicExprType">
                <xs:attribute name="op" use="required">
                    <xs:annotation>
                        <xs:documentation>The unary operator type.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:Name">
                            <xs:enumeration value="isDefined"/>
                            <xs:enumeration value="not"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="EquationType">
        <xs:choice maxOccurs="unbounded">
            <xs:element ref="ct:Scalar"/>
            <xs:element maxOccurs="1" minOccurs="1" ref="ct:SymbRef"/>
            <xs:element ref="math:Binop"/>
            <xs:element ref="math:Uniop"/>
            <xs:element name="Piecewise" type="math:PiecewiseType">
                <xs:annotation>
                    <xs:documentation>Defines a piecewise expression.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element ref="math:FunctionCall"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="FunctionCallType">
        <xs:sequence>
            <xs:element ref="ct:SymbRef"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="FunctionArgument">
                <xs:annotation>
                    <xs:documentation>An argument of the function.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="math:FunctionArgumentType"/>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="FunctionArgumentType">
        <xs:sequence>
            <xs:element minOccurs="0" ref="ct:Symbol"/>
            <xs:element minOccurs="0" ref="ct:Description"/>
            <xs:choice>
                <xs:element maxOccurs="1" ref="math:Equation"/>
                <xs:element ref="ct:Scalar"/>
                <xs:element ref="math:Constant"/>
                <xs:element ref="ct:SymbRef"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="symbId" type="ct:SymbolIdType" use="required">
            <xs:annotation>
                <xs:documentation>The symbold ID of the argument.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="Otherwise">
        <xs:annotation>
            <xs:documentation>The otherwise case in a piecewise function.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="Constant" type="math:ConstantType">
        <xs:annotation>
            <xs:documentation>A constant symbol.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="FunctionCall" type="math:FunctionCallType">
        <xs:annotation>
            <xs:documentation>A function call.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="Binop" type="math:BinopType">
        <xs:annotation>
            <xs:documentation>A binary operator.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="Uniop" type="math:UniopType">
        <xs:annotation>
            <xs:documentation>A unary operator.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="LogicBinop" type="math:LogicBinOpType">
        <xs:annotation>
            <xs:documentation>A logical binary operator used in logical expressions.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="LogicUniop" type="math:LogicUniOpType">
        <xs:annotation>
            <xs:documentation>A logical unary operator used in logical expressions.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="Condition">
        <xs:annotation>
            <xs:documentation>A condition defined by a logical expression. Can be evaluated to True or False.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="math:LogicConditionType"> </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="Equation">
        <xs:annotation>
            <xs:documentation>A mathematical expression that is evaluated to a scalar type.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="math:EquationType"> </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
</xs:schema>
