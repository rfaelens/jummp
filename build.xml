<project name="jummp" default="test-app">
    <property environment="env"/>
    <property name="grailsWorkdir" value="${basedir}/grailswork"/>
    <import file="${env.GRAILS_HOME}/src/grails/grails-macros.xml" />
    <!-- Sets the gant environment -->
    <taskdef name="gant" classname="org.codehaus.gant.ant.Gant">
        <classpath>
            <pathelement location="${env.GRAILS_HOME}/lib/org.codehaus.gant/gant_groovy1.8/jars/gant_groovy1.8-1.9.6.jar"/>
            <pathelement location="${env.GRAILS_HOME}/lib/org.codehaus.groovy/groovy-all/jars/groovy-all-2.0.8.jar"/>
        </classpath>
    </taskdef>

    <!--Task Definition to invoke Groovy compile-->
    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc">
        <classpath>
            <pathelement location="${env.GRAILS_HOME}/lib/org.codehaus.gant/gant_groovy1.8/jars/gant_groovy1.8-1.9.6.jar"/>
            <pathelement location="${env.GRAILS_HOME}/lib/org.codehaus.groovy/groovy-all/jars/groovy-all-2.0.8.jar"/>
            <pathelement location="${env.GRAILS_HOME}/dist/grails-web-2.2.2.jar"/>
            <pathelement location="${env.GRAILS_HOME}/dist/grails-plugin-converters-2.2.2.jar"/>
        </classpath>
    </taskdef>

<!-- Target to execute the testing of one plugin. Used by antcall from test-plugins -->
    <target name="test-plugin">
        <echo message="Running tests for Plugin ${plugin}"/>
        <grails command="test-app" args="-xml ${coverage}" cwd="${basedir}/jummp-plugins/jummp-plugin-${plugin}">
            <sysprops>
                <sysproperty key="grails.work.dir" value="${grailsWorkdir}"/>
            </sysprops>
        </grails>
        <copy todir="${basedir}/target/test-reports">
            <fileset dir="${basedir}/jummp-plugins/jummp-plugin-${plugin}/target/test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
        </copy>
    </target>

<!-- Runs test-app in all plugins (except JMS) -->
    <target name="test-plugins">
        <antcall target="test-plugin">
            <param name="plugin" value="configuration"/>
        </antcall>
        <antcall target="test-plugin">
            <param name="plugin" value="core-api"/>
        </antcall>
        <antcall target="test-plugin">
            <param name="plugin" value="git"/>
        </antcall>
        <antcall target="test-plugin">
            <param name="plugin" value="sbml"/>
        </antcall>
        <antcall target="test-plugin">
            <param name="plugin" value="security"/>
        </antcall>
<!-- Leave SVN out because we currently focus on Git
        <antcall target="test-plugin">
            <param name="plugin" value="subversion"/>
        </antcall>
-->
<!-- Do not test jms plugin as it requires an instance of jummp running   -->
    </target>

<!-- Runs test-app in the core application -->
    <target name="test-core">
        <grails command="test-app" args="-xml ${coverage}" cwd="${basedir}">
            <sysprops>
                <sysproperty key="grails.work.dir" value="${grailsWorkdir}"/>
            </sysprops>
        </grails>
    </target>

<!-- Generates the test reports for all tests -->
    <target name="generate-report">
        <junitreport todir="${basedir}/target/test-reports">
            <fileset dir="${basedir}/target/test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${basedir}/target/test-reports/html"/>
        </junitreport>
    </target>

<!-- Sets the required properties for normal test runs -->
    <target name="prepare-test-app">
        <property name="coverage" value=""/>
    </target>

<!-- Runs all tests (without code coverage)  -->
    <target name="test-app" depends="prepare-test-app, test-core, test-plugins, generate-report">
    </target>

<!-- Sets the required properties for code coverage generation -->
    <target name="prepare-coverage">
        <property name="coverage" value="-coverage"/>
    </target>

<!-- Runs all tests with code coverage -->
    <target name="coverage" depends="prepare-coverage, test-core, test-plugins, generate-report">
        <grails command="coverage-report" cwd="${basedir}"/>
    </target>

    <!-- Copies the sources to a build directory excluding not needed files and directories -->
    <target name="copy">
        <property name="builddir" value="${basedir}/build"/>
        <delete dir="${builddir}"/>
        <mkdir dir="${builddir}"/>
        <copy todir="${builddir}">
            <fileset dir="${basedir}">
                <exclude name="**/out/"/>
                <exclude name="**/target/"/>
                <exclude name="**/test/"/>
                <exclude name="**/doc/"/>
                <exclude name="**/build/"/>
                <exclude name="**/activemq-data/"/>
                <exclude name="jummp-plugins/**/grails-app/views/error.gsp"/>
                <exclude name="jummp-plugins/**/grails-app/views/layouts/"/>
                <exclude name="jummp-plugins/**/web-app/"/>
                <exclude name="**/*.iml"/>
                <exclude name="**/cobertura.ser"/>
                <exclude name="**/*.orig"/>
                <exclude name="**/*~"/>
            </fileset>
        </copy>
    </target>

<!-- Performs the actual building of war file using grails war. Cleans before building -->
    <target name="build-war" depends="remove-grails-plugins">
        <grails command="clean" cwd="${builddir}">
            <sysprops>
                <sysproperty key="grails.work.dir" value="${grailsWorkdir}"/>
            </sysprops>
        </grails>
        <grails command="war ${builddir}/target/jummp.war" cwd="${builddir}">
            <sysprops>
                <sysproperty key="grails.work.dir" value="${grailsWorkdir}"/>
            </sysprops>
        </grails>
    </target>

<!-- Build war with all plugins -->
    <target name="war" depends="build-war">
    </target>
</project>
